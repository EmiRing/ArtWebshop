// <auto-generated />
using System;
using ArtWebshop.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ArtWebshop.Data.Migrations.Users
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210805185945_First")]
    partial class First
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ArtWebshop.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("BillingCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BillingCountry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BillingPostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BillingStreetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeliveryCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeliveryCountry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeliveryPostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeliveryStreetName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "9e930bfa-991b-40f6-a86b-6519f55cf78a",
                            AccessFailedCount = 0,
                            BillingCity = "Göteborg",
                            BillingCountry = "Sverige",
                            BillingPostalCode = "12345",
                            BillingStreetName = "Hemadress 1",
                            ConcurrencyStamp = "bea55096-d5fc-4d8e-93c0-fc9532f9be69",
                            Email = "admin@site.com",
                            EmailConfirmed = true,
                            FirstName = "TestUserAdmin",
                            LastName = "SuperUser",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@SITE.COM",
                            NormalizedUserName = "ADMIN@SITE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEB10g1IbXlGZJByXyz8P1K6CspS9XqumQcdLjCNc1ABTOkgkETpXfWlC6WXDO/zlig==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "917cfd6d-aac9-4cca-b518-88bce5a69d88",
                            TwoFactorEnabled = false,
                            UserName = "admin@site.com"
                        },
                        new
                        {
                            Id = "8aee0c42-b86c-480d-8585-8e632ae44adf",
                            AccessFailedCount = 0,
                            BillingCity = "Göteborg",
                            BillingCountry = "Sverige",
                            BillingPostalCode = "12345",
                            BillingStreetName = "Hemadress 1",
                            ConcurrencyStamp = "d9afdc32-6c86-46b8-9f91-4f46b6cc87bb",
                            Email = "vendor@site.com",
                            EmailConfirmed = true,
                            FirstName = "TestUserVendor",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "VENDOR@SITE.COM",
                            NormalizedUserName = "VENDOR@SITE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMVuD9rzIe0VB3ZR2dp0S/909PP6FYpkfZUfAVODJ9ihfe4CBmL8oSqC9n1ngrLFTg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d8431dc6-cf00-47e9-bdd4-72e0333e5a31",
                            TwoFactorEnabled = false,
                            UserName = "vendor@site.com"
                        },
                        new
                        {
                            Id = "148212fc-8421-4151-8a20-daad9dd4cd9a",
                            AccessFailedCount = 0,
                            BillingCity = "Göteborg",
                            BillingCountry = "Sverige",
                            BillingPostalCode = "12345",
                            BillingStreetName = "Hemadress 1",
                            ConcurrencyStamp = "fa1788da-fa2e-4767-b46b-ca5f2fe843f3",
                            Email = "customer@site.com",
                            EmailConfirmed = true,
                            FirstName = "TestUserCustomer",
                            LastName = "Buy",
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMER@SITE.COM",
                            NormalizedUserName = "CUSTOMER@SITE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBlEkaUGrnlVJwTOp4TTlV4oDkMwsuE7sHeBcUaKmidTXdFqUwbxbH/svnusj6w7vQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e7da5d15-526f-439e-8be0-dcd9d189fd22",
                            TwoFactorEnabled = false,
                            UserName = "customer@site.com"
                        },
                        new
                        {
                            Id = "3a037856-e1ad-48d6-92f3-77553d97f535",
                            AccessFailedCount = 0,
                            BillingCity = "Göteborg",
                            BillingCountry = "Sverige",
                            BillingPostalCode = "12345",
                            BillingStreetName = "Hemadress 1",
                            ConcurrencyStamp = "09d1c91e-177d-42b1-986a-6e213bf37616",
                            Email = "artist@site.com",
                            EmailConfirmed = true,
                            FirstName = "TestUserArtist",
                            LastName = "Upload",
                            LockoutEnabled = false,
                            NormalizedEmail = "ARTIST@SITE.COM",
                            NormalizedUserName = "ARTIST@SITE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEI4b7pDAld3ZkfBIILeaD+70vA0gnFUECYJI6lhyVZzVjmHohp/NQuQHC8eVohQHxA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "20392f7c-eb6b-4654-b0c8-bedc56a3a479",
                            TwoFactorEnabled = false,
                            UserName = "artist@site.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "cfd3e227-a15b-4bde-bef4-e093ea748157",
                            ConcurrencyStamp = "cfd3e227-a15b-4bde-bef4-e093ea748157",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "c3c0726b-072f-4202-b2a3-a71309e8e870",
                            ConcurrencyStamp = "c3c0726b-072f-4202-b2a3-a71309e8e870",
                            Name = "Vendor",
                            NormalizedName = "VENDOR"
                        },
                        new
                        {
                            Id = "878c8bfc-59b1-4a41-becc-e6b2b5f7185b",
                            ConcurrencyStamp = "878c8bfc-59b1-4a41-becc-e6b2b5f7185b",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "55a182aa-10ce-4975-901a-38e606978b32",
                            ConcurrencyStamp = "55a182aa-10ce-4975-901a-38e606978b32",
                            Name = "Artist",
                            NormalizedName = "ARTIST"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "9e930bfa-991b-40f6-a86b-6519f55cf78a",
                            RoleId = "cfd3e227-a15b-4bde-bef4-e093ea748157"
                        },
                        new
                        {
                            UserId = "8aee0c42-b86c-480d-8585-8e632ae44adf",
                            RoleId = "c3c0726b-072f-4202-b2a3-a71309e8e870"
                        },
                        new
                        {
                            UserId = "148212fc-8421-4151-8a20-daad9dd4cd9a",
                            RoleId = "878c8bfc-59b1-4a41-becc-e6b2b5f7185b"
                        },
                        new
                        {
                            UserId = "3a037856-e1ad-48d6-92f3-77553d97f535",
                            RoleId = "55a182aa-10ce-4975-901a-38e606978b32"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ArtWebshop.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ArtWebshop.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArtWebshop.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ArtWebshop.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
