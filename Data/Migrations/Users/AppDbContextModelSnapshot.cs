// <auto-generated />
using System;
using ArtWebshop.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ArtWebshop.Data.Migrations.Users
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ArtWebshop.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("BillingCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BillingCountry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BillingPostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BillingStreetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeliveryCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeliveryCountry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeliveryPostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeliveryStreetName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "54d61f5f-98f1-489b-8bca-651c70d80ff1",
                            AccessFailedCount = 0,
                            BillingCity = "Göteborg",
                            BillingCountry = "Sverige",
                            BillingPostalCode = "12345",
                            BillingStreetName = "Hemadress 1",
                            ConcurrencyStamp = "f1a1c4ae-4be9-4d16-a93b-a438294883c3",
                            Email = "admin@site.com",
                            EmailConfirmed = true,
                            FirstName = "TestUserAdmin",
                            LastName = "SuperUser",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@SITE.COM",
                            NormalizedUserName = "ADMIN@SITE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEODz6OjPV7j0TuR/j9qIvd+Dn6OksYFa/SJ9i/huj/XPqbCq+iz1ymA/zTNobTEK3w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "52bac319-aac4-44b0-80a0-a150ba9eef82",
                            TwoFactorEnabled = false,
                            UserName = "admin@site.com"
                        },
                        new
                        {
                            Id = "db46f107-766d-4b38-9d3b-d1b22b6fd811",
                            AccessFailedCount = 0,
                            BillingCity = "Göteborg",
                            BillingCountry = "Sverige",
                            BillingPostalCode = "12345",
                            BillingStreetName = "Hemadress 1",
                            ConcurrencyStamp = "626828ed-00e3-48a5-830f-3bbba88ee920",
                            Email = "vendor@site.com",
                            EmailConfirmed = true,
                            FirstName = "TestUserVendor",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "VENDOR@SITE.COM",
                            NormalizedUserName = "VENDOR@SITE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAL0F9IAJQ4BtcrTjmY1tuYw5EVjRCEWZgOGmkIUOjuNDaY/cutLqx/Zh87ubShu1A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2eb4d7f4-192d-440b-ac4e-0e9faf64605e",
                            TwoFactorEnabled = false,
                            UserName = "vendor@site.com"
                        },
                        new
                        {
                            Id = "6ab96968-d910-4c01-908a-8445be5ce216",
                            AccessFailedCount = 0,
                            BillingCity = "Göteborg",
                            BillingCountry = "Sverige",
                            BillingPostalCode = "12345",
                            BillingStreetName = "Hemadress 1",
                            ConcurrencyStamp = "0baeaf44-fcea-4fd8-b658-f07121415e1e",
                            Email = "customer@site.com",
                            EmailConfirmed = true,
                            FirstName = "TestUserCustomer",
                            LastName = "Buy",
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMER@SITE.COM",
                            NormalizedUserName = "CUSTOMER@SITE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAamU+e4ZuxEOz8IyoQxK38lF1+90OYN0Pz+J9lKLlYEs6KyRM3gBsW8+TZ8SRxdgw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "053060da-bf15-4cd6-9746-2b1e8c0fbd8b",
                            TwoFactorEnabled = false,
                            UserName = "customer@site.com"
                        },
                        new
                        {
                            Id = "87738567-4d4e-4460-8c4d-a9e2b2157992",
                            AccessFailedCount = 0,
                            BillingCity = "Göteborg",
                            BillingCountry = "Sverige",
                            BillingPostalCode = "12345",
                            BillingStreetName = "Hemadress 1",
                            ConcurrencyStamp = "448af235-f6ff-4f26-91e7-179facf9a42d",
                            Email = "artist@site.com",
                            EmailConfirmed = true,
                            FirstName = "TestUserArtist",
                            LastName = "Upload",
                            LockoutEnabled = false,
                            NormalizedEmail = "ARTIST@SITE.COM",
                            NormalizedUserName = "ARTIST@SITE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOGwCr+MQ6RHF6VQpnjK/Ddh8oZWVNye8zR3U4hz8ykAQakXfTjIACOxvPrDdyhJkA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0d6f66c2-f11c-49ea-84f4-64b536fe78bb",
                            TwoFactorEnabled = false,
                            UserName = "artist@site.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "fc7eca9a-7b44-42df-8a6d-2a35a51e7fe9",
                            ConcurrencyStamp = "fc7eca9a-7b44-42df-8a6d-2a35a51e7fe9",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "0329ff7d-7d07-43d9-ae9a-e57dbbb76123",
                            ConcurrencyStamp = "0329ff7d-7d07-43d9-ae9a-e57dbbb76123",
                            Name = "Vendor",
                            NormalizedName = "VENDOR"
                        },
                        new
                        {
                            Id = "c10f1603-c552-4ebb-b9dd-dab126d5bdf1",
                            ConcurrencyStamp = "c10f1603-c552-4ebb-b9dd-dab126d5bdf1",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "ba217b17-2277-4789-b6ef-388d7912f99f",
                            ConcurrencyStamp = "ba217b17-2277-4789-b6ef-388d7912f99f",
                            Name = "Artist",
                            NormalizedName = "ARTIST"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "54d61f5f-98f1-489b-8bca-651c70d80ff1",
                            RoleId = "fc7eca9a-7b44-42df-8a6d-2a35a51e7fe9"
                        },
                        new
                        {
                            UserId = "db46f107-766d-4b38-9d3b-d1b22b6fd811",
                            RoleId = "0329ff7d-7d07-43d9-ae9a-e57dbbb76123"
                        },
                        new
                        {
                            UserId = "6ab96968-d910-4c01-908a-8445be5ce216",
                            RoleId = "c10f1603-c552-4ebb-b9dd-dab126d5bdf1"
                        },
                        new
                        {
                            UserId = "87738567-4d4e-4460-8c4d-a9e2b2157992",
                            RoleId = "ba217b17-2277-4789-b6ef-388d7912f99f"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ArtWebshop.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ArtWebshop.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArtWebshop.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ArtWebshop.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
