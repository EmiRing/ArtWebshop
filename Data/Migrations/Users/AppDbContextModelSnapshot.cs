// <auto-generated />
using System;
using ArtWebshop.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ArtWebshop.Data.Migrations.Users
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ArtWebshop.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("BillingCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BillingCountry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BillingPostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BillingStreetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeliveryCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeliveryCountry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeliveryPostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeliveryStreetName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "b84357c6-ef6d-4fbd-b349-38b052f066e1",
                            AccessFailedCount = 0,
                            BillingCity = "Göteborg",
                            BillingCountry = "Sverige",
                            BillingPostalCode = "12345",
                            BillingStreetName = "Hemadress 1",
                            ConcurrencyStamp = "b59f1fe0-67d5-4707-84ed-2c73c17a35a8",
                            Email = "admin@site.com",
                            EmailConfirmed = true,
                            FirstName = "TestUserAdmin",
                            LastName = "SuperUser",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@SITE.COM",
                            NormalizedUserName = "ADMIN@SITE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBaEB8D1H/o2HjEMcIT8kWaWZ/h8h/1UpDqS9G/W2ypj94jUKX9Thqi/gx5frUqa8A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "44401953-0991-49c0-9e39-7637222e1bd9",
                            TwoFactorEnabled = false,
                            UserName = "admin@site.com"
                        },
                        new
                        {
                            Id = "12752564-6882-4aa1-b484-889826f71edf",
                            AccessFailedCount = 0,
                            BillingCity = "Göteborg",
                            BillingCountry = "Sverige",
                            BillingPostalCode = "12345",
                            BillingStreetName = "Hemadress 1",
                            ConcurrencyStamp = "c6b2aa0f-a796-448e-a379-286f0c9d23b1",
                            Email = "vendor@site.com",
                            EmailConfirmed = true,
                            FirstName = "TestUserVendor",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "VENDOR@SITE.COM",
                            NormalizedUserName = "VENDOR@SITE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKObbW1yzfoWm6Cypa3OtI6OCr9Nu+GfANDVX6ke/WtOvggY49i/5UIMGtH/ZPu77g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0c7dd75d-1e60-4701-8ba7-bf4873423eab",
                            TwoFactorEnabled = false,
                            UserName = "vendor@site.com"
                        },
                        new
                        {
                            Id = "f2868be0-8053-4ad1-a092-4403741f230b",
                            AccessFailedCount = 0,
                            BillingCity = "Göteborg",
                            BillingCountry = "Sverige",
                            BillingPostalCode = "12345",
                            BillingStreetName = "Hemadress 1",
                            ConcurrencyStamp = "93f33ed8-e160-456f-a1f7-1836d3a501f6",
                            Email = "customer@site.com",
                            EmailConfirmed = true,
                            FirstName = "TestUserCustomer",
                            LastName = "Buy",
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMER@SITE.COM",
                            NormalizedUserName = "CUSTOMER@SITE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDwd1ywOneebihJgj2gSDTWcpvMKNlCEMTZh2U9yMX/Uf+mRFEFFV8+63TtmMyxxaA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "569ed5b6-8912-47bb-bb5b-7c81acc2077f",
                            TwoFactorEnabled = false,
                            UserName = "customer@site.com"
                        },
                        new
                        {
                            Id = "39be2141-fe19-4129-92b3-dbbe5f8e6896",
                            AccessFailedCount = 0,
                            BillingCity = "Göteborg",
                            BillingCountry = "Sverige",
                            BillingPostalCode = "12345",
                            BillingStreetName = "Hemadress 1",
                            ConcurrencyStamp = "85b58529-18e7-43bf-adfc-a08c242bfa19",
                            Email = "artist@site.com",
                            EmailConfirmed = true,
                            FirstName = "TestUserArtist",
                            LastName = "Upload",
                            LockoutEnabled = false,
                            NormalizedEmail = "ARTIST@SITE.COM",
                            NormalizedUserName = "ARTIST@SITE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEE4SgacTz6KCRrGtTDRUocs/Rk0o//AAFtg9c8xHmixZTRK6w3SuSky7kdDJ617P6Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d2d3f13b-5c04-4ffa-b2a8-929093193ae8",
                            TwoFactorEnabled = false,
                            UserName = "artist@site.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "cf6cbbb1-793e-4996-9a7b-09b66e330661",
                            ConcurrencyStamp = "cf6cbbb1-793e-4996-9a7b-09b66e330661",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "d58a14b6-6efc-426f-ba02-a01fbe40a2fe",
                            ConcurrencyStamp = "d58a14b6-6efc-426f-ba02-a01fbe40a2fe",
                            Name = "Vendor",
                            NormalizedName = "VENDOR"
                        },
                        new
                        {
                            Id = "2f1da8ed-5fb1-4646-90d4-4a23f3d0708b",
                            ConcurrencyStamp = "2f1da8ed-5fb1-4646-90d4-4a23f3d0708b",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "136497bb-c1c9-4b91-9934-eb537dde5a25",
                            ConcurrencyStamp = "136497bb-c1c9-4b91-9934-eb537dde5a25",
                            Name = "Artist",
                            NormalizedName = "ARTIST"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "b84357c6-ef6d-4fbd-b349-38b052f066e1",
                            RoleId = "cf6cbbb1-793e-4996-9a7b-09b66e330661"
                        },
                        new
                        {
                            UserId = "12752564-6882-4aa1-b484-889826f71edf",
                            RoleId = "d58a14b6-6efc-426f-ba02-a01fbe40a2fe"
                        },
                        new
                        {
                            UserId = "f2868be0-8053-4ad1-a092-4403741f230b",
                            RoleId = "2f1da8ed-5fb1-4646-90d4-4a23f3d0708b"
                        },
                        new
                        {
                            UserId = "39be2141-fe19-4129-92b3-dbbe5f8e6896",
                            RoleId = "136497bb-c1c9-4b91-9934-eb537dde5a25"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ArtWebshop.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ArtWebshop.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArtWebshop.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ArtWebshop.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
