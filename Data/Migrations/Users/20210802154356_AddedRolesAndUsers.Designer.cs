// <auto-generated />
using System;
using ArtWebshop.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ArtWebshop.Data.Migrations.Users
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210802154356_AddedRolesAndUsers")]
    partial class AddedRolesAndUsers
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ArtWebshop.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("BillingCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BillingCountry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BillingPostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BillingStreetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeliveryCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeliveryCountry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeliveryPostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeliveryStreetName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "9dfea853-c45a-43fc-9249-246d944afca6",
                            AccessFailedCount = 0,
                            BillingCity = "Göteborg",
                            BillingCountry = "Sverige",
                            BillingPostalCode = "12345",
                            BillingStreetName = "Hemadress 1",
                            ConcurrencyStamp = "a63f3c29-53b2-4c12-97a7-92514444bfd5",
                            Email = "admin@site.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "A",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@SITE.COM",
                            NormalizedUserName = "ADMIN@SITE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECV11i8MHrm0pmL1MaAUuyVuGEHHKcxk5UdrIGBi99RceETXzSU301Cs8UtKbAOIEw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dc0db732-ad3e-4911-b7a5-9b3a0789c475",
                            TwoFactorEnabled = false,
                            UserName = "admin@site.com"
                        },
                        new
                        {
                            Id = "f7a07165-20a6-4e24-8cee-40fbd2e32547",
                            AccessFailedCount = 0,
                            BillingCity = "Göteborg",
                            BillingCountry = "Sverige",
                            BillingPostalCode = "12345",
                            BillingStreetName = "Hemadress 1",
                            ConcurrencyStamp = "153ac259-1c4b-450a-b80b-60e175f92824",
                            Email = "vendor@site.com",
                            EmailConfirmed = true,
                            FirstName = "Vendor",
                            LastName = "A",
                            LockoutEnabled = false,
                            NormalizedEmail = "VENDOR@SITE.COM",
                            NormalizedUserName = "VENDOR@SITE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHrGBleWOp1PM8ku3efVCxetBQ7Cxcu63QatpVCwVHV4tVAkF3PMp1dxN6FVMg94VQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "238520c3-c946-4843-8e14-1f45d089cb79",
                            TwoFactorEnabled = false,
                            UserName = "vendor@site.com"
                        },
                        new
                        {
                            Id = "3224840d-e29b-4a97-b717-74905f1789ac",
                            AccessFailedCount = 0,
                            BillingCity = "Göteborg",
                            BillingCountry = "Sverige",
                            BillingPostalCode = "12345",
                            BillingStreetName = "Hemadress 1",
                            ConcurrencyStamp = "1dee464d-f369-4f16-8739-489f1679deef",
                            Email = "customer@site.com",
                            EmailConfirmed = true,
                            FirstName = "Customer",
                            LastName = "A",
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMER@SITE.COM",
                            NormalizedUserName = "CUSTOMER@SITE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIEAVEQjqxueSk/7+nQPZmOqzseDXPae/Lyk29CfjE396COFHmcQx/sGehKeHud/1A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "eebe4710-c2b4-43f4-a711-999cc982cebc",
                            TwoFactorEnabled = false,
                            UserName = "customer@site.com"
                        },
                        new
                        {
                            Id = "3c9b81ff-5cca-4b08-87af-cdde3a6088b0",
                            AccessFailedCount = 0,
                            BillingCity = "Göteborg",
                            BillingCountry = "Sverige",
                            BillingPostalCode = "12345",
                            BillingStreetName = "Hemadress 1",
                            ConcurrencyStamp = "0685ba26-8563-4abe-8e83-f0a19e7120a3",
                            Email = "artist@site.com",
                            EmailConfirmed = true,
                            FirstName = "Artist",
                            LastName = "A",
                            LockoutEnabled = false,
                            NormalizedEmail = "ARTIST@SITE.COM",
                            NormalizedUserName = "ARTIST@SITE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOjJ2dViLQc6geAMsSeI4uhYcN20y7B5hlGcEzxBxKC1bbHi7K45pZm35md2hP696g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9a6d32a7-b677-43dd-a2dc-46351dc19bfd",
                            TwoFactorEnabled = false,
                            UserName = "artist@site.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "6a47c76b-c175-4c8e-9d15-e30470998d73",
                            ConcurrencyStamp = "6a47c76b-c175-4c8e-9d15-e30470998d73",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "75c7cbfd-106f-4573-be36-174458ea4884",
                            ConcurrencyStamp = "75c7cbfd-106f-4573-be36-174458ea4884",
                            Name = "Vendor",
                            NormalizedName = "VENDOR"
                        },
                        new
                        {
                            Id = "d796de89-c46f-4abc-8944-d53c9f091ca8",
                            ConcurrencyStamp = "d796de89-c46f-4abc-8944-d53c9f091ca8",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "66c81e41-aa05-47d2-98c5-216b67c76a1d",
                            ConcurrencyStamp = "66c81e41-aa05-47d2-98c5-216b67c76a1d",
                            Name = "Artist",
                            NormalizedName = "ARTIST"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "9dfea853-c45a-43fc-9249-246d944afca6",
                            RoleId = "6a47c76b-c175-4c8e-9d15-e30470998d73"
                        },
                        new
                        {
                            UserId = "f7a07165-20a6-4e24-8cee-40fbd2e32547",
                            RoleId = "75c7cbfd-106f-4573-be36-174458ea4884"
                        },
                        new
                        {
                            UserId = "3224840d-e29b-4a97-b717-74905f1789ac",
                            RoleId = "d796de89-c46f-4abc-8944-d53c9f091ca8"
                        },
                        new
                        {
                            UserId = "3c9b81ff-5cca-4b08-87af-cdde3a6088b0",
                            RoleId = "66c81e41-aa05-47d2-98c5-216b67c76a1d"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ArtWebshop.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ArtWebshop.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArtWebshop.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ArtWebshop.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
