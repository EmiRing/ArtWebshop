
@model Order
@*@{
    var shoppingCartItems = Model.shoppingCart.GetShoppingCartItems();
}*@
<div>
    <div id="checkout" class="container-md border border-2 bg-white w-75">
        <h4>Kundkorg</h4>
        <hr />
        <table class="table table-hover table-bd mb-0">
            <thead>
                <tr>
                    <th class="text-left col-6" scope="col">Produkt</th>
                    <th class="text-right col-2" scope="col">Antal</th>
                    <th class="text-right col-3" scope="col">Pris</th>
                    <th class="col-1" scope="col"></th>
                </tr>
            </thead>
            <tbody>

                <tr is="cart-row" v-for="item in shoppingCartItems"
                    v-bind:key="item.id"
                    v-bind:item="item"></tr>

            </tbody>
            <tfoot>
                <tr>
                    <td colspan="2" class="text-right">Total:</td>
                    <td colspan="2" class="text-left">
                        {{total}} kr
                    </td>
                </tr>
            </tfoot>
        </table>
    </div>

    <div id="checkout" class="container-md border border-2 bg-white w-75">
        <div class="row">
            <div class="col-md-6">
                <h4>Personuppgifter</h4>
                <hr />
                <form id="profile-form" method="post">
                    <div asp-validation-summary="All" class="text-danger"></div>
                    <div class="form-group row mt-3">
                        <div class="form-group col w-50">
                            <label asp-for="DeliveryFirstName"></label>
                            <input asp-for="DeliveryFirstName" value="@Model.DeliveryFirstName" class="form-control" />
                        </div>
                        <div class="form-group col w-50">
                            <label asp-for="DeliveryLastName"></label>
                            <input asp-for="DeliveryLastName" value="@Model.DeliveryLastName" class="form-control" />
                        </div>
                    </div>
                    <div class="form-group">
                        <label asp-for="DeliveryStreetName"></label>
                        <input asp-for="DeliveryStreetName" value="@Model.DeliveryStreetName" class="form-control" />
                    </div>
                    <div class="form-group row">
                        <div class="form-group col w-25">
                            <label asp-for="DeliveryPostalCode"></label>
                            <input asp-for="DeliveryPostalCode" value="@Model.DeliveryPostalCode" class="form-control" />
                        </div>
                        <div class="form-group w-75">
                            <label asp-for="DeliveryCity"></label>
                            <input asp-for="DeliveryCity" value="@Model.DeliveryCity" class="form-control" />
                        </div>
                    </div>
                        <div class="form-group">
                            <label asp-for="DeliveryCountry"></label>
                            <input asp-for="DeliveryCountry" value="@Model.DeliveryCountry" class="form-control" />
                        </div>
                        <input asp-for="UserId" value="@Model.UserId" hidden />

                        <button id="checkout-button" type="submit" class="btn btn-primary m-3">Slutför köp</button>
                </form>
            </div>
        </div>
    </div>
</div>

<script>

Vue.component('cart-row', {
    props: ['item'],
    computed: {
        subtotal: function() {
            return Math.round( (this.item.product.price * this.item.amount)*100)/100
        }
    },
    methods: {
        async add(id) {
            const postData = { itemId: id, check: "add" };
            await axios.post("/ShoppingCart/ChangeAmount", postData);
            this.item.amount++;
        },
        async reduce(id) {
            const postData = { itemId: id, check: "reduce" };
            await axios.post("/ShoppingCart/ChangeAmount", postData);
            this.item.amount--;
            if (this.item.amount <= 0) {
                this.$destroy();
                this.$el.parentNode.removeChild(this.$el);
            }

        },
        async remove(id) {
            const postData = { itemId: id, check: "remove" };
            await axios.post("/ShoppingCart/ChangeAmount", postData);
            this.item.amount = 0;
            this.$destroy();
            this.$el.parentNode.removeChild(this.$el);


        }

    },
    template: '<tr class="p-2">\
                    <td class="text-left">{{ item.product.title }}</td>\
                    <td class="text-center">\
                    <a class="pointer" v-on:click="reduce(item.product.productId)"> - </a> \
                    {{item.amount}} \
                    <a class="pointer" v-on:click="add(item.product.productId)"> + </a></td>\
                    <td class="text-right"> {{item.product.price}} kr<br />{{this.subtotal}} kr</td>\
                    <td class="text-left">\
                        <a class="pointer" v-on:click="remove(item.product.productId)"><i class="far fa-trash-alt"></i></a>\
                    </td>\
                  </tr>'
})


new Vue({
    el: '#checkout',
    data: {
        shoppingCartItems: [],
        shoppingCartTotal: 0
    },
    computed: {
        total() {
            return this.shoppingCartItems.reduce((sum, item) => Math.round((sum + item.amount * item.product.price)*100)/100, 0)
        }
    },
    created() {
        axios.get("/ShoppingCart/GetVueData")
            .then(res => {
                this.shoppingCartItems = res.data.shoppingCart.shoppingCartItems,
                    this.shoppingCartTotal = res.data.shoppingCartTotal
            })
    }
});
</script>